$media-queries: (
  "sm": 576px,
  "md": 768px,
  "lg": 992px,
  "xl": 1200px,
  "xxl": 1400px
);
$gaps: (
  0: 0,
  1: 0.25rem,
  2: 0.5rem,
  3: 1rem,
  4: 1.5rem,
  5: 3rem
);

@mixin create-columns($col) {
  width: calc(100% / $col);
}
@mixin create-offsets($col) {
  margin-left: calc((100%/12) * $col);
}
@mixin create-gaps($size, $axis) {
  --bs-gutter-#{$axis}: #{$size};
}

bs-row {
  --bs-gutter-x: 1.5rem;
  --bs-gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  margin-top: calc(-1 * var(--bs-gutter-y));
  margin-right: calc(-0.5 * var(--bs-gutter-x));
  margin-left: calc(-0.5 * var(--bs-gutter-x));

  > * {
    box-sizing: border-box;
    flex-shrink: 0;
    width: 100%;
    max-width: 100%;
    padding-right: calc(var(--bs-gutter-x) * 0.5);
    padding-left: calc(var(--bs-gutter-x) * 0.5);
    margin-top: var(--bs-gutter-y);
  }

  // Cols
  &[cols] > * {
    flex: 0 0 auto;
  }
  &[cols="auto"] > * {
    width: auto;
  }
  @for $i from 1 through 6 {
    &[cols="#{$i}"] > * {
      @include create-columns($i)
    }
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      @for $i from 1 through 6 {
        &[cols-#{$mq}="#{$i}"] > * {
          @include create-columns($i)
        }
      }
    }
  }

  // Offset
  @for $i from 0 through 11 {
    &[offset="#{$i}"] {
      @include create-offsets($i)
    }
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      @for $i from 1 through 11 {
        &[offset-#{mq}="#{$i}"] {
          @include create-offsets($i)
        }
      }
    }
  }

  // Gap
  @each $i, $gap in $gaps {
    &[g="#{$i}"],
    &[gx="#{$i}"] {
      @include create-gaps($gap, 'x')
    }
    &[g="#{$i}"],
    &[gy="#{$i}"] {
      @include create-gaps($gap, 'y')
    }
  }
  @each $mq, $size in $media-queries {
    @each $i, $gap in $gaps {
      &[g-#{$mq}="#{$i}"],
      &[gx-#{$mq}="#{$i}"] {
        @include create-gaps($gap, 'x')
      }
      &[g-#{$mq}="#{$i}"],
      &[gy-#{$mq}="#{$i}"] {
        @include create-gaps($gap, 'y')
      }
    }
  }


  /* Flex */
  &[flex="fill"] {
    flex: 1 1 auto !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex-#{$mq}="fill"] {
        flex: 1 1 auto !important;
      }
    }
  }

  &[flex="row"] {
    flex-direction: row !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex="row"] {
        flex-direction: row !important;
      }
    }
  }

  &[flex="column"] {
    flex-direction: column !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex="column"] {
        flex-direction: column !important;
      }
    }
  }

  &[flex="row-reverse"] {
    flex-direction: row-reverse !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex="row-reverse"] {
        flex-direction: row-reverse !important;
      }
    }
  }

  &[flex="column-reverse"] {
    flex-direction: column-reverse !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex-#{$mq}="column-reverse"] {
        flex-direction: column-reverse !important;
      }
    }
  }

  &[flex="grow-0"] {
    flex-grow: 0 !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex-#{$mq}="grow-0"] {
        flex-grow: 0 !important;
      }
    }
  }

  &[flex="grow-1"] {
    flex-grow: 1 !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex-#{$mq}="grow-1"] {
        flex-grow: 1 !important;
      }
    }
  }

  &[flex="shrink-0"] {
    flex-shrink: 0 !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex-#{$mq}="shrink-0"] {
        flex-shrink: 0 !important;
      }
    }
  }

  &[flex="shrink-1"] {
    flex-shrink: 1 !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex-#{$mq}="shrink-1"] {
        flex-shrink: 1 !important;
      }
    }
  }

  &[flex="wrap"] {
    flex-wrap: wrap !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex-#{$mq}="wrap"] {
        flex-wrap: wrap !important;
      }
    }
  }

  &[flex="nowrap"] {
    flex-wrap: nowrap !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex-#{$mq}="nowrap"] {
        flex-wrap: nowrap !important;
      }
    }
  }

  &[flex="wrap-reverse"] {
    flex-wrap: wrap-reverse !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[flex-#{$mq}="wrap-reverse"] {
        flex-wrap: wrap-reverse !important;
      }
    }
  }


  /* Justify Content */
  &[justify="start"] {
    justify-content: flex-start !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[justify-#{$mq}="start"] {
        justify-content: flex-start !important;
      }
    }
  }

  &[justify="end"] {
    justify-content: flex-end !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[justify-#{$mq}="end"] {
        justify-content: flex-end !important;
      }
    }
  }

  &[justify="center"] {
    justify-content: center !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[justify-#{$mq}="center"] {
        justify-content: center !important;
      }
    }
  }

  &[justify="between"] {
    justify-content: space-between !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[justify-#{$mq}="between"] {
        justify-content: space-between !important;
      }
    }
  }

  &[justify="around"] {
    justify-content: space-around !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[justify-#{$mq}="around"] {
        justify-content: space-around !important;
      }
    }
  }

  &[justify="evenly"] {
    justify-content: space-evenly !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[justify-#{$mq}="evenly"] {
        justify-content: space-evenly !important;
      }
    }
  }


  // Align Items
  &[align="start"] {
    align-items: flex-start !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[align-#{$mq}="start"] {
        align-items: flex-start !important;
      }
    }
  }

  &[align="end"] {
    align-items: flex-end !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[align-#{$mq}="end"] {
        align-items: flex-end !important;
      }
    }
  }

  &[align="center"] {
    align-items: center !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[align-#{$mq}="center"] {
        align-items: center !important;
      }
    }
  }

  &[align="baseline"] {
    align-items: baseline !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[align-#{$mq}="baseline"] {
        align-items: baseline !important;
      }
    }
  }

  &[align="stretch"] {
    align-items: stretch !important;
  }
  @each $mq, $size in $media-queries {
    @media (min-width: $size) {
      &[align-#{$mq}="stretch"] {
        align-items: stretch !important;
      }
    }
  }

}
